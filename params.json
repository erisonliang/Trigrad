{"name":"Trigrad","tagline":"Triangle Gradient Image Compression","body":"### What's Trigrad?\r\nTrigrad is a novel image compression algorithm that uses triangle gradients (barycentric coordinates) to compress. This differs heavily from other compression techniques such as JPEG, which typically use signal functions as the basis for their compression.\r\n\r\n### How well does it work?\r\nNot really well enough to try to push onto people. Current results show that Trigrad can only beat something like JPEG with optimal conditions.\r\n\r\n### How does it look?\r\nOne of the best tests of a compression algorithm is how its artifacts look. Here's a comparison of a mostly uncompressed image and one compressed with Trigrad, using 3,000 samples.\r\n![Uncompressed vs. 3,000 samples](http://i.imgur.com/hJyrhMd.png)\r\n(Left: Uncompressed. Right: Compressed.)\r\n\r\nOf course, with a higher number of samples, a better quality output can be produced. The same image with 100,000 samples starts to look a lot more accurate.\r\n![Uncompressed vs. 100,000 samples](http://i.imgur.com/5zwCEF5.png)\r\n(Left: Uncompressed. Right: Compressed.)\r\n\r\n### How does it work?\r\nThis is where Trigrad gets interesting. Throughout development, I've made sure to produce as many visualizations as I can for the purposes of debugging. This will allow me to explain the process of compression and decompression visually.\r\n\r\n#### Input\r\n![](http://i.imgur.com/0ojv1Sh.jpg)\r\nThis is the boring old input. Nothing too interesting until we start our first step.\r\n#### Edge Detection\r\n![Edge Detection](http://i.imgur.com/9YHOtQ0.png)\r\nThis step is vital. An edge detection filter (currently sobel) is used to produce a table of values. These values dictate the chance that a sample will be formed later on.\r\n#### Sampling (~100,000 samples)\r\n![](http://i.imgur.com/XRF7mz4.png)\r\nThis is a visualization of what samples are taken during the sampling step. You can easily see how more samples have formed around the areas of interest thanks to the last step.\r\n#### Compression Finished\r\nBy this point, the samples can be saved and zipped up, producing a 961KB file against JPEG's 607KB file.\r\n#### Decompression Begins\r\n![](http://i.imgur.com/nzcvlkJ.png)\r\nA triangle mesh is formed from the loaded samples. This is achieved using the awesome [Triangle.NET](https://triangle.codeplex.com/) port of the [Triangle](https://triangle.gs) library.\r\n#### Barycentric Coordinates\r\n![](http://i.imgur.com/M6PwJWA.jpg)\r\nAt this stage, the triangles are rasterized and filled using Barycentric coordinates. This visualization shows each channel representing a different value in the barycentric coordinates.\r\n#### Gradient Fill\r\n![](http://i.imgur.com/LFotS6b.jpg)\r\nNow, the pixels will be filled based on their Barycentric coordinates. The default and most obvious option is to fill the pixels smoothly based on their distance.\r\nHowever, more interesting options are available.\r\n![](http://i.imgur.com/FcmeAZu.png)\r\nThis is after being filled using a dithering algorithm. It almost looks like it could be a Photoshop filter.\r\n![](http://i.imgur.com/Xkf028v.png)\r\nThis is after being filled with a nearest-neighbour type algorithm. Nice and polygonal.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}